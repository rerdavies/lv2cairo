import Box from '@mui/material/Box';
import Typography from '@mui/material/Typography';
import { PreformatedText } from "../../CodeFragment";
import { P, Subheading, Ul } from './StandardFormats';



function BuildingAnLv2UiPlugin() {
    return (
        <Box className={"page_column"}>
            <Typography variant="h3" paragraph>
                Building an LV2 UI Plugin
            </Typography>
            <P>
                The Lv2UI base class provides the base implementaion of an LV2 UI plugin. It performs the following tasks on your behalf:
            </P>
            <Ul>
                <li>Makes the plugin visible to LV2 hosts.</li>
                <li>Creates and manages the X11 window into which the UI is rendered.</li>
                <li>By default, renders a completely functional user-interface.</li>
            </Ul>
            <P>
                To do all of this, Lv2UI needs a description of the ports on the LV2 audio plugin. This information
                is generated using a command-line utility, <span className={"code"}>generate_lv2c_plugin_info</span>, which is built as
                part of the Lv2Cairo build procedure. If you are building the project yourself, <span className={"code"}>generate_lv2c_plugin_info</span>
                can be found in the <span className={"code"}>build/src/</span>
            </P>
            <P>
                The test plugin, included in the Lv2Cairo project generates the neccessary file using the following command.
            </P>
            {PreformatedText(
                `
generate_lv2c_plugin_info 
    https://rerdavies.github.io/lv2c/test_plugin
    --ttl build/src/manifest.ttl 
    --out build/src/SamplePluginInfo.hpp 
    --class SamplePluginInfo
`)}

            <Typography paragraph>
                Here is a complete implementation of an LV2 user interface plugin.
            </Typography>
            <div className={"preformat_fileName"}>SamplePluginUI.cpp:</div>
            {PreformatedText(
                `
#include "lv2c_ui/Lv2UI.hpp"

// The plugin info generated by generate_lv2c_plugin_info.
#include "SamplePluginInfo.hpp"

using namespace lv2c::ui;
using namespace lv2c;


// class declaration.
class SamplePlugin: public Lv2UI {
public:
    using super=Lv2UI;
    SamplePlugin();
};


// Pass the plugin info from SamplePluginInfo.hpp to Lv2UI.
// Specify a default window position.

SamplePlugin::SamplePlugin() 
: super(
    SamplePluginInfo::Create(),
    WindowPosition(0,0,640,480) // default window size.
    )
{

}

// Make the plugin visible to LV2 hosts.

static Lv2UIRegistration<SamplePlugin> 
registration { PLUGIN_UI_URI};
`)}

            <P>
                In the SamplePlugin build procedure, <span className={"code"}>PLUGIN_UI_URI</span> is passed in from the CMakeList.txt make file.
                You need to modify the following variables so that your new plugin doesn't conflict with the the test plugin.
            </P>
            <div className={"preformat_fileName"}>CMakeList.txt:</div>
            {PreformatedText(
                `
set(PLUGIN_URI https://rerdavies.github.io/lv2c/test_plugin)
set(LV2_INSTALL_PATH lv2tk_test.lv2)  # relative to /usr/lib/lv2, or /usr/local/lib/lv2.
set(PLUGIN_UI_URI $\{PLUGIN_URI}-ui )
set(LV2_SO_NAME lv2tk_test)
set(LV2_UI_SO_NAME $\{LV2_SO_NAME}_ui)`)}
            <P>If you are using a non-CMake build procedure, these values need to be added as compiler defines on the compiler commandline.</P>
            <P>
                The plugin's TTL file must be modified to make the UI plugin visible to LV2 hosts.
            </P>
            <P>Declare that your plugin has a custom user interface:
            </P>
            <div className={"preformat_fileName"}>lv2tk_test.ttl:</div>
            {PreformatedText(
                `
    ...

@prefix ui: <http://lv2plug.in/ns/extensions/ui#> .

    ...
<https://rerdavies.github.io/lv2c/test_plugin>
  a lv2:Plugin ,
    lv2:UtilityPlugin ;
    doap:name "Lv2Cairo Demo Plugin" 
    ;
    # VVVVV    Declare that the plugin has a UI   VVVVV
    ui:ui <https://rerdavies.github.io/lv2c/test_plugin-ui>;  
        ... 
        `)}

            <Typography paragraph>
                And add the following lines at the end of the plugin's TTL file:
            </Typography>
            <div className={"preformat_fileName"}>lv2tk_test.ttl:</div>
            {PreformatedText(
                `
<https://rerdavies.github.io/lv2c/test_plugin-ui> 
    a  ui:X11UI ;
    lv2:binary <lv2tk_test_ui.so>;

    lv2:extensionData ui::idle ;
    lv2:extensionData ui:resize ;
    lv2:extensionData ui:idleInterface;
    lv2:requiredFeature ui:idleInterface ;
    .
`)}
            <Typography paragraph>
                That's it.
            </Typography>
            <Typography paragraph>
                Anticlimactic. I know.
            </Typography>
            <Typography paragraph>
                You can customize the background color of the UI by adding the following code to the constructor:
            </Typography>
            {PreformatedText(
                `
SamplePlugin::SamplePlugin() 
: super(
    SamplePluginInfo::Create(),
    WindowPosition(0,0,640,480))
{
    Lv2cTheme::ptr theme = Lv2cTheme::Create();
    theme->paper = Lv2cColor("#080818"); // something dark.
    this->Theme(theme);
}
`)}
            <Subheading>
                Linker Options
            </Subheading>
            <P>
                On Linux, Cairo/X11 libraries do not support being unloaded after they have been loaded. 
                (This is pretty much a universal  problem with LV2 UI plugins, regardless of which graphics backend they uses). 
                The UI plugin must  therefore be marked with the linker 'nodelete' option, in order to prevent LV2 host from unloading
                the UI plugin, and -- consequently -- the UI framework libraries.</P>
            <P>This is performed by the following line in the CMakeList.txt file of the sample 
                plugin:
            </P>
            {PreformatedText(
                `
target_link_options(lv2c_test_plugin PRIVATE
    "-Wl,-z,nodelete "
)
`)}
            <P>The UI Plugin must statically link the liblv2c.a and liblv2c_ui.a libraries. In the sample plugin CMakeList.txt file, this is
                performed by the following cmake commands:
            </P>
                {PreformatedText(
                `
target_link_libraries(
    ToobAmpUI PRIVATE lv2c_ui
)
`)}
            <P>cmake will automatically link dependent libraries required by lv2c_ui</P>
        </Box>
    );
}

export default BuildingAnLv2UiPlugin
